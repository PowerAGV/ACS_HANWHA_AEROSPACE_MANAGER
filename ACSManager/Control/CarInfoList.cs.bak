using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using ACSManager.FORM;
using System.Threading;
using DevExpress.XtraGrid.Views.Grid;
using System.IO;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Net;
using DevExpress.XtraEditors.Repository;

namespace ACSManager.Control
{
    public partial class CarInfoList : DevExpress.XtraEditors.XtraUserControl, IDisposable
    {
        private Color bk1 = Color.Black;
        private Color bk2 = Color.Black;

        private string select_agv = "";
        private string route_area = "ALL";

        public delegate void ChangedMoveArea(string area);

        #region Constructor, Load
        public CarInfoList()
        {
            InitializeComponent();
        }

        private void CarInfoList_Load(object sender, EventArgs e)
        {
            //진행중이던거 완료 되면 화면 다시 띄우게 하기 위해서 추가
            Task.WaitAll();
            LoadAgvList();
            Program.main_process.DataFilterEvent += new DataFilterEventHandler(ChangedArea);

            if (Program.USER_DATA.UserGroup == "MANAGER" || Program.USER_DATA.UserGroup == "MASTER")
            {

            }
            else
            {
                btnAdd.Enabled = false;
                btnDelete.Enabled = false;
                btnModify.Enabled = false;
            }
            timer1.Start();
        }
        #endregion

        #region Function
        private void LoadAgvList()
        {
            try
            {
                DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                DataSet1M.tb_agvDataTable dtAgv = tAgv.GetDataByMapID();
                DataTable dt;

                foreach (DataSet1M.tb_agvRow item in dtAgv)
                {
                    if (item.drive_status == "OFF")
                    {
                        item.stop_reason = "";
                        item.battery_status = "";
                        item.current_node = "";
                        item.current_job_id = "";
                        item.tag_id = "";
                    }
                }

                if (Setting.FLOOR == 1)
                {
                    var result = dtAgv.AsEnumerable().Where(p => p.agv_area == 1 || p.agv_area == 0);


                    if (route_area == "ALL")
                        dt = result.Any() ? result.CopyToDataTable() : dtAgv.Clone();
                    else
                    {
                        var result1 = result.Where(p => p.route_area == route_area);
                        dt = result1.Any() ? result1.CopyToDataTable() : dtAgv.Clone();
                    }
                    //{
                    //    var result1 = result.Where(p => p.agv_area == 1);
                    //    dt = result1.Any() ? result1.CopyToDataTable() : dtAgv.Clone();
                    //}
                    //else
                    //{
                    //    var result1 = result.Where(p => p.agv_area == 0);
                    //    dt = result1.Any() ? result1.CopyToDataTable() : dtAgv.Clone();
                    //}

                    gridControl1.Invoke(new MethodInvoker(delegate ()
                    {
                        gridControl1.DataSource = dt;
                    }));
                }
                else
                {
                    var result = dtAgv.AsEnumerable().Where(p => p.agv_area != 1);

                    if (route_area == "ALL")
                        dt = result.Any() ? result.CopyToDataTable() : dtAgv.Clone();
                    else
                    {
                        var result1 = result.Where(p => p.route_area == route_area);
                        dt = result1.Any() ? result1.CopyToDataTable() : dtAgv.Clone();
                    }

                    //else if (cbxArea.SelectedIndex == 1)
                    //{

                    //}
                    //else if (cbxArea.SelectedIndex == 2)
                    //{
                    //    var result1 = result.Where(p => p.agv_area == 3);
                    //    dt = result1.Any() ? result1.CopyToDataTable() : dtAgv.Clone();
                    //}
                    //else
                    //{
                    //    var result1 = result.Where(p => p.agv_area == 0);
                    //    dt = result1.Any() ? result1.CopyToDataTable() : dtAgv.Clone();
                    //}

                    gridControl1.Invoke(new MethodInvoker(delegate ()
                    {
                        gridControl1.DataSource = dt;
                    }));
                }
            }
            catch (Exception)
            {

            }

            gridView1.BestFitColumns();
        }

        int ChangeGridCell(int rCnt, string fildname, string value)
        {
            if (gridView1.GetRowCellValue(rCnt, fildname).ToString() != value)
            {
                if (gridControl1.InvokeRequired)
                {
                    gridControl1.Invoke(new MethodInvoker(delegate ()
                    {
                        gridView1.SetRowCellValue(rCnt, fildname, value);
                    }));
                }
                else
                {
                    gridView1.SetRowCellValue(rCnt, fildname, value);
                }

                return 1; // 변경 된 내용이 있다면 증가하도록 함.
            }
            return 0;
        }

        void threadRefrashAgvList()
        {
            try
            {
                //gridView1.OptionsView.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Bottom;
                // 데이터 소스로 하지 말고 수동으로 일일이 비교 하고 틀린 값이 있으면 업데이트 하도록

                DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                DataSet1M.tb_agvDataTable dtAGV1 = tAgv.GetDataByMapID();
                DataSet1M.tb_agvDataTable dtAGV2 = new DataSet1M.tb_agvDataTable();
                if (Setting.FLOOR == 1)
                {

                    var results = from myRow in dtAGV1.AsEnumerable()
                                  where myRow.Field<int>("agv_area") == 1 || myRow.Field<int>("agv_area") == 0
                                  select myRow;

                    if (route_area == "ALL")
                        results.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    else
                    {
                        var result = results.Where(p => p.route_area == route_area);
                        result.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    }
                    //else
                    //{
                    //    var result = results.Where(p => p.agv_area == 0);
                    //    result.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    //}

                    //results.CopyToDataTable(dtAGV2,LoadOption.PreserveChanges);
                }
                else
                {
                    var results = from myRow in dtAGV1.AsEnumerable()
                                  where myRow.Field<int>("agv_area") == 2 || myRow.Field<int>("agv_area") == 3 || myRow.Field<int>("agv_area") == 0
                                  select myRow;

                    if (route_area == "ALL")
                        results.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    else
                    {
                        var result = results.Where(p => p.route_area == route_area);
                        result.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    }

                    //else if (cbxArea.SelectedIndex == 1)
                    //{
                    //    var result = results.Where(p => p.agv_area == 2);
                    //    result.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    //}
                    //else if (cbxArea.SelectedIndex == 2)
                    //{
                    //    var result = results.Where(p => p.agv_area == 3);
                    //    result.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    //}
                    //else
                    //{
                    //    var result = results.Where(p => p.agv_area == 0);
                    //    result.CopyToDataTable(dtAGV2, LoadOption.PreserveChanges);
                    //}
                }

                foreach (DataSet1M.tb_agvRow agvItem in dtAGV2)
                {
                    int rhandle = IsExist(agvItem.agv_id);
                    if (rhandle == -1 && gridView1.DataSource != null)
                    {// 추가

                        LoadAgvList(); // 추가가 되면 갱신 하고 리턴
                        return;
                    }
                    else
                    {// 변경된 값만 셀을 바꾼다.

                        int change_count = 0;
                        if (agvItem.drive_status.ToString().Equals("OFF"))
                        {
                            agvItem.stop_reason = "";
                            agvItem.battery_status = "";
                            agvItem.current_node = "";
                            agvItem.current_job_id = "";
                            agvItem.tag_id = "";
                        }

                        if (!agvItem.Iscurrent_statusNull())
                            change_count += ChangeGridCell(rhandle, "current_status", agvItem.current_status);
                        if (!agvItem.Isstop_reasonNull())
                            change_count += ChangeGridCell(rhandle, "stop_reason", agvItem.stop_reason);
                        if (!agvItem.Isbattery_statusNull())
                            change_count += ChangeGridCell(rhandle, "battery_status", agvItem.battery_status);
                        if (!agvItem.Iscurrent_nodeNull())
                            change_count += ChangeGridCell(rhandle, "current_node", agvItem.current_node);
                        if (!agvItem.Iscurrent_routeNull())
                            change_count += ChangeGridCell(rhandle, "current_route", agvItem.current_route);
                        if (!agvItem.Iscurrent_job_idNull())
                        {
                            if (agvItem.current_job_id.Split('-').Length > 1)
                                change_count += ChangeGridCell(rhandle, "current_job_id", agvItem.current_job_id);
                        }

                        change_count += ChangeGridCell(rhandle, "available", agvItem.available.ToString());

                        change_count += ChangeGridCell(rhandle, "drive_status", agvItem.Isdrive_statusNull() ? "" : agvItem.drive_status);

                        change_count += ChangeGridCell(rhandle, "tag_id", agvItem.tag_id);

                        change_count += ChangeGridCell(rhandle, "route_area", agvItem.Isroute_areaNull() ? "" : agvItem.route_area);

                        

                        if (change_count != 0)
                            if (select_agv == agvItem.agv_id)
                                agvDetail1.SetAgvInformation(agvItem, false);
                    }
                }
            }
            catch (Exception ee)
            {
                TraceManager.AddLog(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
                System.Diagnostics.Debug.WriteLine(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
            }

        }

        private void RefrashAgvList()
        {

            Task mytask = Task.Run(() =>
            {
                threadRefrashAgvList();
            });
            //Thread mulThread = new Thread(delegate () { threadRefrashAgvList(); });
            //mulThread.Start();
        }


        private int IsExist(string agvID)
        {
            if (agvID == null)
                return -1;


            for (int i = 0; i < gridView1.RowCount; i++)
            {
                if (gridView1.GetRowCellValue(i, "agv_id").ToString() == agvID)
                    return i;
            }

            return -1;
        }


        public void PrintGrid()
        {
            gridControl1.ShowPrintPreview();
        }
        #endregion

        #region Event Function
        private void btnAdd_ItemClick(object sender, EventArgs e)
        {
            try
            {

                CarInfo mCar = new CarInfo();
                if (mCar.ShowDialog() == DialogResult.OK)
                {
                    DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                    // insert and refrash
                    tAgv.InsertAGV(mCar.m_agv_id, mCar.area, mCar.mapid, mCar.m_ip, mCar.m_port, mCar.floor);
                    LoadAgvList();

                    MessageBox.Show("AGV Data Created", "ACS", MessageBoxButtons.OK);
                }
            }
            catch (Exception ee)
            {
                MessageBox.Show("Insert Fail 1", "ACS", MessageBoxButtons.OK, MessageBoxIcon.None);
                TraceManager.AddLog(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            try
            {
                int[] selItm = gridView1.GetSelectedRows();
                object obj = gridView1.GetRow(gridView1.FocusedRowHandle);
                if (MessageBox.Show("Do you want to delete?", "ACS", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    if (selItm.Length > 0)
                    {
                        string agv_id = (obj as DataRowView).Row[0].ToString();
                        DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                        tAgv.DeleteQuery(agv_id);
                    }

                }
                LoadAgvList();

            }
            catch (Exception ee)
            {
                MessageBox.Show("Delete Fail", "ACS", MessageBoxButtons.OK, MessageBoxIcon.None);
                TraceManager.AddLog(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
            }
        }

        private void btnModify_Click(object sender, EventArgs e)
        {
            try
            {
                // insert and refrash
                DataSet1MTableAdapters.m_map_masterTableAdapter madp = new DataSet1MTableAdapters.m_map_masterTableAdapter();
                long mapid = (long)madp.GetActiveMapID();

                int[] selItm = gridView1.GetSelectedRows();
                object obj = gridView1.GetRow(gridView1.FocusedRowHandle);
                if (selItm.Length > 0)
                {
                    string agv_id = (obj as DataRowView).Row[0].ToString();
                    CarInfo mCar = new CarInfo();
                    mCar.SetEditMode(agv_id);
                    if (mCar.ShowDialog() == DialogResult.OK)
                    {
                        DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                        tAgv.UpdateQuery(mCar.area, mCar.m_ip, mCar.m_port, mCar.mapid, mCar.floor, mCar.m_agv_id);
                        LoadAgvList();

                        MessageBox.Show("AGV Data Changed", "ACS", MessageBoxButtons.OK);
                    }
                }
            }
            catch (Exception ee)
            {
                MessageBox.Show("Delete Fail", "ACS", MessageBoxButtons.OK, MessageBoxIcon.None);
                TraceManager.AddLog(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
            }
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            try
            {
                object selectObj = gridView1.GetRow(gridView1.FocusedRowHandle);// (gridView1.FocusedRowHandle);
                select_agv = (((DataRowView)selectObj)[0].ToString());

                DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                DataSet1M.tb_agvDataTable dtAgv = tAgv.GetDataByAgvID(select_agv);

                foreach (DataSet1M.tb_agvRow agvItem in dtAgv)
                {
                    agvDetail1.SetAgvInformation(agvItem, true);
                    break;
                }
            }
            catch (Exception)
            {
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            // 0.5 초마다 갱신 한다.
            RefrashAgvList();
        }


        private void gridView1_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView View = sender as GridView;
            if (e.RowHandle >= 0)
            {
                //if (bk1 == Color.Black)
                //{
                //    bk1 = e.Appearance.BackColor;
                //    bk2 = e.Appearance.BackColor2;
                //}

                //string category = View.GetRowCellDisplayText(e.RowHandle, View.Columns["current_status"]);
                //if (category.Contains("EMPTY") || category.Contains("LOAD") || category.ToUpper().Contains("Lif") || category.ToUpper().Contains("WAIT") || category.ToUpper().Contains("COM"))
                //{
                //    e.Appearance.BackColor = bk1;
                //    e.Appearance.BackColor2 = bk2;
                //}
                //else
                //{
                //    if (e.Column.FieldName == "agv_id")
                //    {
                //        e.Appearance.BackColor = Color.Red;
                //        e.Appearance.BackColor2 = Color.DarkRed;
                //    }
                //}

                string drive_status = View.GetRowCellDisplayText(e.RowHandle, View.Columns["drive_status"]);
                if (!drive_status.Equals("Ready"))
                {

                }

            }
        }

        private void gridView1_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            try
            {
                GridView view = sender as GridView;

                if (e.Column.FieldName == "v_use" && e.IsGetData)
                {
                    DataRow row = gridView1.GetDataRow(e.ListSourceRowIndex);
                    string ft = row["agv_area"].ToString();

                    if (ft.Contains("1"))
                        e.Value = "1F";
                    else if (ft.Contains("2"))
                        e.Value = "2F-TUB";
                    else if (ft.Contains("3"))
                        e.Value = "2F-GER";
                    else
                        e.Value = "NONE";



                }
                if (e.Column.FieldName == "v_from" && e.IsGetData)
                {
                    DataRow row = gridView1.GetDataRow(e.ListSourceRowIndex);
                    string ft = row["current_route"].ToString();
                    if (ft.Contains("-"))
                    {
                        string[] frArr = ft.Split("-".ToCharArray());
                        e.Value = frArr[0];
                    }
                }
                if (e.Column.FieldName == "v_to" && e.IsGetData)
                {
                    DataRow row = gridView1.GetDataRow(e.ListSourceRowIndex);
                    string ft = row["current_route"].ToString();
                    if (ft.Contains("-"))
                    {
                        string[] frArr = ft.Split("-".ToCharArray());
                        e.Value = frArr[1];
                    }
                }
                if (e.Column.FieldName == "v_status" && e.IsGetData)
                {
                    DataRow row = gridView1.GetDataRow(e.ListSourceRowIndex);
                    string ft = row["current_status"].ToString();
                    if (ft.Contains("EMPTY"))
                        e.Value = "Pre-Run";
                    else if (ft.Contains("LOAD"))
                        e.Value = "Transfer";
                    else if (ft.Contains("COM"))
                        e.Value = "OFF";
                    else if (ft.Contains("WAIT"))
                        e.Value = "Waiting";
                    else
                        e.Value = ft;
                }


            }
            catch (Exception ee)
            {
                TraceManager.AddLog(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
                System.Diagnostics.Debug.WriteLine(string.Format("{0}r\n{1}", ee.StackTrace, ee.Message));
            }
        }
        #endregion

        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            try
            {
                object selectObj = gridView1.GetRow(gridView1.FocusedRowHandle);// (gridView1.FocusedRowHandle);
                select_agv = (((DataRowView)selectObj)[0].ToString());

                DataSet1MTableAdapters.tb_agvTableAdapter tAgv = new DataSet1MTableAdapters.tb_agvTableAdapter();
                DataSet1M.tb_agvDataTable dtAgv = tAgv.GetDataByAgvID(select_agv);

                foreach (DataSet1M.tb_agvRow agvItem in dtAgv)
                {
                    agvDetail1.SetAgvInformation(agvItem, true);
                    break;
                }
            }
            catch (Exception)
            {

            }
        }

        private void btn_CSV_Click(object sender, EventArgs e)
        {
            timer1.Stop();
            Task.WaitAll();

            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
            ofd.Title = "Select AGV CSV File";
            ofd.ValidateNames = false;
            ofd.Multiselect = false;

            if (ofd.ShowDialog() != DialogResult.OK) return;

            var lines = File.ReadAllLines(ofd.FileName)?.ToList();

            //객체로 변환
            lines.RemoveAt(0); //컬럼 삭제
            var list_AGV = new List<AGV>();

            foreach (string obj in lines)
            {
                var values = obj.Split(',');
                list_AGV.Add(new AGV
                {
                    ID = values[0],
                    Route_Area = values[1],
                    IP = values[2],
                    PORT = int.Parse(values[3]),
                    Available = int.Parse(values[4]),
                    Area = int.Parse(values[5])
                });
            }

            if (list_AGV.Count() > 0)
            {
                var adtAGV = new DataSet1MTableAdapters.tb_agvTableAdapter();
                var tbAGV = adtAGV.GetData();

                if (tbAGV != null && tbAGV.Rows.Count > 0)
                {
                    foreach (var obj in list_AGV)
                    {
                        var row = tbAGV.AsEnumerable().Where(p => p.agv_id == obj.ID); //번호 있는지 확인
                        if (row.Count() != 0)
                            adtAGV.DeleteQuery(row.ElementAt(0).agv_id); //있으면 삭제시킴

                        adtAGV.InsertAGV(obj.ID, obj.Route_Area, 0, obj.IP, obj.PORT, obj.Area);//삽입
                    }
                }
                MessageBox.Show("Insert Complete");
                //완료되었습니다. 메세지 박스 띄우기
            }
            else
            {
                MessageBox.Show("Not Exist Data");
                //데이터가 없습니다.
            }

            //다시 다 갱신

            timer1.Start();
        }

        private void cbxArea_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (timer1.Enabled)
                timer1.Stop();

            Task.WaitAll();

            LoadAgvList();
            timer1.Start();
        }

        private void btnLogDown_Click(object sender, EventArgs e)
        {
            string Folder = GetDownloadsPath();
            //Folder = Folder + @"/ACS Engine Logs/" + DateTime.Now.ToString("yyyyMMdd");
            Folder = Folder + @"/ACS Engine Logs/" + DateTime.Today.ToString("yyyyMMdd");
            if (!Directory.Exists(Folder))
            {
                Directory.CreateDirectory(Folder);
            }


            string Date = DateTime.Today.ToString("yyyyMMdd");
            string url = string.Empty;
            string agv_id = string.Empty;
            int moveArea = 0;


            object selectObj = gridView1.GetRow(gridView1.FocusedRowHandle);// (gridView1.FocusedRowHandle);
            agv_id = (((DataRowView)selectObj)["agv_id"].ToString());
            moveArea = (int)((DataRowView)selectObj)["agv_area"];

            //agv_id랑 route_area를 가져와야하는뎅

            if (Setting.FLOOR == 1)
            {
                url = @"http://10.225.28.84/ACS_LOG/Trace_1/" + Date + "/";
                download(url + "Trace_" + Date + ".log", Folder);

                agv_id = string.Format("{0:D3}", agv_id) + "_" + Date;
                download(url + agv_id + ".log", Folder);
            }

            else //2층
            {
                if (moveArea == 2)
                {
                    url = @"http://10.225.28.85/ACS_LOG/Trace_2/" + Date + "/";
                    download(url + "Trace_" + Date + ".log", Folder);

                    agv_id = string.Format("{0:D3}", agv_id) + "_" + Date;
                    download(url + agv_id + ".log", Folder);
                }
                else
                {
                    url = @"http://10.225.28.85/ACS_LOG/Trace_3/" + Date + "/";
                    download(url + "Trace_" + Date + ".log", Folder);

                    agv_id = string.Format("{0:D3}", agv_id) + "_" + Date;
                    download(url + agv_id + ".log", Folder);
                }
            }

            MessageBox.Show(agv_id.Split('_')[0] + " AGV Log Download Completed", this.Text, MessageBoxButtons.OK);

            Process.Start(Folder);
        }

        private static Guid FolderDownloads = new Guid("374DE290-123F-4565-9164-39C4925E467B");
        [DllImport("shell32.dll", CharSet = CharSet.Auto)]
        private static extern int SHGetKnownFolderPath(ref Guid id, int flags, IntPtr token, out IntPtr path);

        public string GetDownloadsPath()
        {
            if (Environment.OSVersion.Version.Major < 6) throw new NotSupportedException();
            IntPtr pathPtr = IntPtr.Zero;
            try
            {
                SHGetKnownFolderPath(ref FolderDownloads, 0, IntPtr.Zero, out pathPtr);
                return Marshal.PtrToStringUni(pathPtr);
            }
            finally
            {
                Marshal.FreeCoTaskMem(pathPtr);
            }
        }


        private void download(string url, string Folder)
        {
            Cursor cursor = Cursors.WaitCursor;
            try
            {

                string filename = url.Substring(url.LastIndexOf("/") + 1);

                WebRequest http = WebRequest.Create(url);

                byte[] buf = new byte[32768];
                using (Stream input = http.GetResponse().GetResponseStream())
                {
                    using (FileStream output = new FileStream(Folder + "/" + filename, FileMode.CreateNew))
                    {
                        int bytesRead = 0;
                        while ((bytesRead = input.Read(buf, 0, buf.Length)) > 0)
                        {
                            output.Write(buf, 0, bytesRead);
                            output.Flush();
                        }

                        input.Close();
                        output.Flush();
                        output.Close();
                        //
                    }
                }
            }
            catch (Exception ex)
            {
                cursor = Cursors.Default;

                //MessageBox.Show(this, ex.Message, this.Text, MessageBoxButtons.OK);
            }
            cursor = Cursors.Default;
        }

        private void ChangedArea(string area)
        {
            route_area = area;
            LoadAgvList();
        }
    }

    public class AGV
    {
        public string ID { get; set; } = "000";
        public string Route_Area { get; set; } = "ALL";
        public string IP { get; set; }
        public int PORT { get; set; } = 55321;
        public int Available { get; set; } = 0;
        public int Area { get; set; } = 0;
    }

}
